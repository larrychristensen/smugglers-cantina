AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  smugglers-cantina

  Smuggler Cantina Template
  
Globals:
  Function:
    Timeout: 60

Parameters:
  Domain:
    Type: String
    Default: http://localhost:8280
  AuthDomain:
    Type: String
    Default: smugglers-cantina-local

Resources:

  CantinaApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      Cors:
        AllowOrigin: !Sub "'${Domain}'"
        AllowCredentials: True
        AllowHeaders: "'Authorization,Content-Type'"
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      GatewayResponses:
        DEFAULT_4xx:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: !Sub "'${Domain}'"
              Access-Control-Allow-Credentials: "'true'"
              Access-Control-Allow-Headers: "'Authorization'"
        DEFAULT_5xx:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: !Sub "'${Domain}'"
              Access-Control-Allow-Credentials: True
              Access-Control-Allow-Headers: "'Authorization'"
      Auth:
        DefaultAuthorizer: CantinaAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          CantinaAuthorizer:
            UserPoolArn: !GetAtt CantinaUserPool.Arn

  CantinaUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AliasAttributes:
        - email
        - preferred_username
        - phone_number
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      EmailConfiguration:
        EmailSendingAccount: DEVELOPER
        From: accounts@smugglers-cantina.awsapps.com
        ReplyToEmailAddress: accounts@smugglers-cantina.awsapps.com
        SourceArn: arn:aws:ses:us-east-1:402722394725:identity/accounts@smugglers-cantina.awsapps.com
      UsernameConfiguration:
        CaseSensitive: false
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true

  # AuthRecordSet:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     HostedZoneName: smugglers-cantina.com.
  #     HostedZoneId: Z104L9KJLVBBPG
  #     Name: auth.smugglers-cantina.com.
  #     Type: A
  #     AliasTarget:
  #       DNSName: !Ref CantinaUserPoolDomain

  CantinaUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "${AuthDomain}"
      UserPoolId: !Ref CantinaUserPool
  
  CantinaUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CantinaUserPool
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - !Ref Domain
      LogoutURLs:
        - !Ref Domain
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin

  CharacterCreationQueue:
    Type: AWS::SQS::Queue
    Properties:
      MaximumMessageSize: 1024
      VisibilityTimeout: 90

  CharactersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: user-id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: user-id
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: characters-by-user
          KeySchema:
            - AttributeName: user-id
              KeyType: HASH
          Projection:
            NonKeyAttributes:
              - name
              - species
              - career
            ProjectionType: INCLUDE
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: full-characters-by-user
          KeySchema:
            - AttributeName: user-id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  EnqueueCharacterFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs12.x
      InlineCode: |
        const AWS = require('aws-sdk');

        const sqs = new AWS.SQS();

        exports.handler = async (event) => {
        console.log("EVENT", event);
        const username = event.requestContext.authorizer.claims["cognito:username"];
        console.log("CLAIMS", username);

        const queueUrl = process.env.QUEUE_URL;
        
        const character = JSON.parse(event.body);
        character["user-id"] = username;

        const characterStr = JSON.stringify(character);
        const params = {
          MessageBody: characterStr,
          QueueUrl: queueUrl
        };

        const domain = process.env.DOMAIN;

        await sqs.sendMessage(params).promise();
        return {
          statusCode: 201,
          body: characterStr,
          headers: {
              "Access-Control-Allow-Origin": domain,
              "Access-Control-Allow-Credentials": "true"
            }
          };
        };      
      Environment:
        Variables:
          QUEUE_URL: !Ref CharacterCreationQueue
          DOMAIN: !Ref Domain
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17' 
          Statement:
            - Effect: Allow
              Action:
                - sqs:SendMessage
              Resource: !GetAtt CharacterCreationQueue.Arn
      Events:
        PutCharacter:
          Type: Api
          Properties:
            RestApiId: !Ref CantinaApi
            Path: /characters/{id}
            Method: PUT
  
  CharacterCreationLambda:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        const AWS = require('aws-sdk');
        const documentClient = new AWS.DynamoDB.DocumentClient();

        exports.handler = async (event) => {
          const requestItems = event.Records
            .map(record => record.body)
            .map(s => JSON.parse(s))
            .map(ddb => {
              return {PutRequest: {Item: ddb}}});
      
          console.log("REQUEST ITEMS", requestItems);

          const tableName = process.env.TABLE_NAME;
          const tableRequest = {};
          tableRequest[tableName] = requestItems;
   
          const request = {
            RequestItems: tableRequest
          };
   
          await documentClient.batchWrite(request).promise();
        };
      Environment:
        Variables:
          TABLE_NAME: !Ref CharactersTable
      Runtime: nodejs12.x
      Handler: index.handler
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17' 
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:BatchWriteItem
              Resource: !GetAtt CharactersTable.Arn
      Tracing: Active
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt CharacterCreationQueue.Arn
            BatchSize: 10
            Enabled: true

  UiBucket:
    Type: AWS::S3::Bucket

  UiBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref UiBucket
      PolicyDocument:
        Statement:
          Sid: PublicReadGetObject
          Effect: Allow
          Principal: "*"
          Action: s3:GetObject
          Resource: !Sub "${UiBucket.Arn}/*"

  GetCharactersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs12.x
      InlineCode: |
        const AWS = require('aws-sdk');
        const documentClient = new AWS.DynamoDB.DocumentClient();

        exports.handler = async (event) => {
          console.log("EVENT", event);

          const tableName = process.env.TABLE_NAME;

          console.log("TABLE NAME", tableName);

          const username = event.requestContext.authorizer.claims["cognito:username"];
          const params = {
             TableName: tableName,
             IndexName: 'full-characters-by-user',
             KeyConditions: {
                'user-id': {
                   AttributeValueList: [username],
                   ComparisonOperator: "EQ"
                }
             }
          };
   
          let resp = await documentClient.query(params).promise();
          const domain = process.env.DOMAIN;
          return {
            statusCode: 200,
            headers: {
              "Content-Type": "application/json",
              "Access-Control-Allow-Origin": domain,
              "Access-Control-Allow-Credentials" : "true",
              "Access-Control-Allow-Headers": "Content-Type"
            },
            body: JSON.stringify(resp.Items)
          };
        };      
      Environment:
        Variables:
          TABLE_NAME: !Ref CharactersTable
          DOMAIN: !Ref Domain
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17' 
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - !Sub ${CharactersTable.Arn}/index/full-characters-by-user
      Events:
        GetCharacters:
          Type: Api
          Properties:
            RestApiId: !Ref CantinaApi
            Path: /characters
            Method: get
            RequestParameters:
              - method.request.header.Authorization

Outputs:
    Region:
      Description: "Region"
      Value: !Ref AWS::Region

    ApiId:
      Description: "API ID"
      Value: !Ref CantinaApi

    ApiUrl:
      Description: "API endpoint URL for Prod environment"
      Value: !Sub 'https://${CantinaApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'

    CognitoUserPoolId:
      Description: "Cognito User Pool Id"
      Value: !Ref CantinaUserPool
